<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [tryWinc\tryWinc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image tryWinc\tryWinc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Oct 24 14:35:14 2020
<BR><P>
<H3>Maximum Stack Usage =        568 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
wifi_cb &rArr; m2m_wifi_connect &rArr; m2m_wifi_connect_sc &rArr; hif_send &rArr; hif_chip_wake &rArr; nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[2f]">DMA2_Stream0_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[30]">DMA2_Stream1_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[31]">DMA2_Stream2_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[32]">DMA2_Stream3_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[33]">DMA2_Stream4_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[34]">DMA2_Stream5_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[35]">DMA2_Stream6_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[36]">DMA2_Stream7_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[2a]">EXTI15_10_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[1d]">EXTI9_5_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[3c]">FMPI2C1_ER_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[3b]">FMPI2C1_EV_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[39]">FPU_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[23]">I2C1_ER_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[22]">I2C1_EV_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[25]">I2C2_ER_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[24]">I2C2_EV_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[3d]">LPTIM1_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[38]">RNG_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[2b]">RTC_Alarm_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[26]">SPI1_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[27]">SPI2_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[3a]">SPI5_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[3f]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f410rx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[1e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[21]">TIM1_CC_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[20]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[1f]">TIM1_UP_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[2d]">TIM5_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[2e]">TIM6_DAC_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[28]">USART1_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[29]">USART2_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[37]">USART6_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[40]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f410rx.o(.text)
 <LI><a href="#[41]">fputc</a> from main.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[42]">isr</a> from m2m_hif.o(i.isr) referenced from m2m_hif.o(i.hif_init)
 <LI><a href="#[43]">m2m_hif_cb</a> from m2m_hif.o(i.m2m_hif_cb) referenced from m2m_hif.o(i.hif_init)
 <LI><a href="#[44]">m2m_wifi_cb</a> from m2m_wifi.o(i.m2m_wifi_cb) referenced from m2m_wifi.o(i.m2m_wifi_init)
 <LI><a href="#[3e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[45]">wifi_cb</a> from main.o(i.wifi_cb) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[46]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[b9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[ba]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FMPI2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FMPI2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b0]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cb
</UL>

<P><STRONG><a name="[b2]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cb
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[be]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[bf]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_sleep
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_reset
</UL>

<P><STRONG><a name="[5e]"></a>HAL_GPIO_Init</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[65]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_reset
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[50]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[68]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[51]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[54]"></a>HAL_MspInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[56]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[52]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[58]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[6b]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[6a]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[59]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[5a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[5b]"></a>HAL_SPI_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[5c]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[5f]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
</UL>

<P><STRONG><a name="[55]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[61]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>HAL_UART_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SystemClock_Config</STRONG> (Thumb, 122 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c1]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[74]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_cb
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_clkless_wake
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_send
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_register_cb
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_receive
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_handle_isr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_isr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bus_ioctl
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_data_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_data_read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cmd_rsp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_deinit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_deinit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_connect_sc
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cb
</UL>

<P><STRONG><a name="[c2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[70]"></a>chip_apply_conf</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nmasic.o(i.chip_apply_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = chip_apply_conf &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_reg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg_with_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_bootrom
</UL>

<P><STRONG><a name="[73]"></a>chip_deinit</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, nmasic.o(i.chip_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = chip_deinit &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_reg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg_with_ret
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_deinit
</UL>

<P><STRONG><a name="[75]"></a>enable_interrupts</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nmasic.o(i.enable_interrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = enable_interrupts &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_reg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg_with_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_init
</UL>

<P><STRONG><a name="[41]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[76]"></a>hif_chip_sleep</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, m2m_hif.o(i.hif_chip_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = hif_chip_sleep &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_reg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg_with_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_isr
</UL>

<P><STRONG><a name="[77]"></a>hif_chip_wake</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m2m_hif.o(i.hif_chip_wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = hif_chip_wake &rArr; nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_reg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_clkless_wake
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_isr
</UL>

<P><STRONG><a name="[79]"></a>hif_handle_isr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, m2m_hif.o(i.hif_handle_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = hif_handle_isr &rArr; hif_isr &rArr; hif_chip_wake &rArr; nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_isr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_handle_events
</UL>

<P><STRONG><a name="[7b]"></a>hif_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m2m_hif.o(i.hif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hif_init &rArr; hif_register_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_register_cb
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_register_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_init
</UL>

<P><STRONG><a name="[81]"></a>hif_receive</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, m2m_hif.o(i.hif_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = hif_receive &rArr; nm_read_block &rArr; p_nm_read_block &rArr; nm_spi_read_block &rArr; nm_spi_read &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg_with_ret
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_block
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_set_rx_done
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_cb
</UL>

<P><STRONG><a name="[7d]"></a>hif_register_cb</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, m2m_hif.o(i.hif_register_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hif_register_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_init
</UL>

<P><STRONG><a name="[82]"></a>hif_send</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, m2m_hif.o(i.hif_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = hif_send &rArr; hif_chip_wake &rArr; nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_reg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_block
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg_with_ret
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_chip_wake
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_chip_sleep
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_request_scan
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_req_scan_result
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_connect_sc
</UL>

<P><STRONG><a name="[42]"></a>isr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, m2m_hif.o(i.isr))
<BR>[Address Reference Count : 1]<UL><LI> m2m_hif.o(i.hif_init)
</UL>
<P><STRONG><a name="[87]"></a>m2m_memcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nm_common.o(i.m2m_memcpy))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_connect_sc
</UL>

<P><STRONG><a name="[84]"></a>m2m_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nm_common.o(i.m2m_memset))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_cb
</UL>

<P><STRONG><a name="[88]"></a>m2m_strlen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nm_common.o(i.m2m_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_connect_sc
</UL>

<P><STRONG><a name="[85]"></a>m2m_wifi_connect</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, m2m_wifi.o(i.m2m_wifi_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = m2m_wifi_connect &rArr; m2m_wifi_connect_sc &rArr; hif_send &rArr; hif_chip_wake &rArr; nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_connect_sc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cb
</UL>

<P><STRONG><a name="[86]"></a>m2m_wifi_connect_sc</STRONG> (Thumb, 356 bytes, Stack size 152 bytes, m2m_wifi.o(i.m2m_wifi_connect_sc))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = m2m_wifi_connect_sc &rArr; hif_send &rArr; hif_chip_wake &rArr; nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_send
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_strlen
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_memcpy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_connect
</UL>

<P><STRONG><a name="[b1]"></a>m2m_wifi_get_num_ap_found</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m2m_wifi.o(i.m2m_wifi_get_num_ap_found))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cb
</UL>

<P><STRONG><a name="[89]"></a>m2m_wifi_handle_events</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m2m_wifi.o(i.m2m_wifi_handle_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = m2m_wifi_handle_events &rArr; hif_handle_isr &rArr; hif_isr &rArr; hif_chip_wake &rArr; nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_handle_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>m2m_wifi_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m2m_wifi.o(i.m2m_wifi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = m2m_wifi_init &rArr; nm_drv_init &rArr; wait_for_bootrom &rArr; chip_apply_conf &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_register_cb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>m2m_wifi_req_scan_result</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, m2m_wifi.o(i.m2m_wifi_req_scan_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = m2m_wifi_req_scan_result &rArr; hif_send &rArr; hif_chip_wake &rArr; nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_send
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cb
</UL>

<P><STRONG><a name="[b3]"></a>m2m_wifi_request_dhcp_client</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m2m_wifi.o(i.m2m_wifi_request_dhcp_client))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cb
</UL>

<P><STRONG><a name="[8e]"></a>m2m_wifi_request_scan</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, m2m_wifi.o(i.m2m_wifi_request_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = m2m_wifi_request_scan &rArr; hif_send &rArr; hif_chip_wake &rArr; nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_cb
</UL>

<P><STRONG><a name="[3e]"></a>main</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = main &rArr; m2m_wifi_request_scan &rArr; hif_send &rArr; hif_chip_wake &rArr; nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_request_scan
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_handle_events
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8f]"></a>nm_bsp_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nm_bsp_samd21.o(i.nm_bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nm_bsp_init &rArr; nm_bsp_reset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>nm_bsp_interrupt_ctrl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nm_bsp_samd21.o(i.nm_bsp_interrupt_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_set_rx_done
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_isr
</UL>

<P><STRONG><a name="[7c]"></a>nm_bsp_register_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nm_bsp_samd21.o(i.nm_bsp_register_isr))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_init
</UL>

<P><STRONG><a name="[90]"></a>nm_bsp_reset</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nm_bsp_samd21.o(i.nm_bsp_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nm_bsp_reset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bus_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_init
</UL>

<P><STRONG><a name="[91]"></a>nm_bsp_sleep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nm_bsp_samd21.o(i.nm_bsp_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nm_bsp_sleep &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_clkless_wake
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bus_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_firmware_start
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_bootrom
</UL>

<P><STRONG><a name="[93]"></a>nm_bus_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nm_bus_wrapper_samd21.o(i.nm_bus_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bus_iface_deinit
</UL>

<P><STRONG><a name="[92]"></a>nm_bus_iface_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nmbus.o(i.nm_bus_iface_deinit))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bus_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_deinit
</UL>

<P><STRONG><a name="[98]"></a>nm_bus_iface_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nmbus.o(i.nm_bus_iface_init))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_init
</UL>

<P><STRONG><a name="[94]"></a>nm_bus_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nm_bus_wrapper_samd21.o(i.nm_bus_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_sleep
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_reset
</UL>

<P><STRONG><a name="[95]"></a>nm_bus_ioctl</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nm_bus_wrapper_samd21.o(i.nm_bus_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_rw
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_spi_write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_spi_read
</UL>

<P><STRONG><a name="[78]"></a>nm_clkless_wake</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, nmasic.o(i.nm_clkless_wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_reg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg_with_ret
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_sleep
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_chip_wake
</UL>

<P><STRONG><a name="[8c]"></a>nm_drv_deinit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nmdrv.o(i.nm_drv_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nm_drv_deinit &rArr; chip_deinit &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_deinit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bus_iface_deinit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_deinit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_init
</UL>

<P><STRONG><a name="[8b]"></a>nm_drv_init</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, nmdrv.o(i.nm_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nm_drv_init &rArr; wait_for_bootrom &rArr; chip_apply_conf &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_get_firmware_info
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bus_iface_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bus_iface_deinit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_firmware_start
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_bootrom
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_get_chipid
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupts
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_init
</UL>

<P><STRONG><a name="[9d]"></a>nm_get_firmware_info</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, nmdrv.o(i.nm_get_firmware_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nm_get_firmware_info &rArr; nmi_get_chipid &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg_with_ret
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_get_chipid
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_init
</UL>

<P><STRONG><a name="[7f]"></a>nm_read_block</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, nmbus.o(i.nm_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nm_read_block &rArr; p_nm_read_block &rArr; nm_spi_read_block &rArr; nm_spi_read &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_nm_read_block
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_receive
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_isr
</UL>

<P><STRONG><a name="[9f]"></a>nm_read_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nmbus.o(i.nm_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nm_read_reg &rArr; nm_spi_read_reg &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_firmware_start
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_bootrom
</UL>

<P><STRONG><a name="[72]"></a>nm_read_reg_with_ret</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nmbus.o(i.nm_read_reg_with_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_read_reg_with_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_clkless_wake
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_send
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_receive
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_chip_sleep
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_set_rx_done
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_isr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_get_firmware_info
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_get_chipid
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_deinit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_apply_conf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupts
</UL>

<P><STRONG><a name="[97]"></a>nm_spi_deinit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nmspi.o(i.nm_spi_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_deinit
</UL>

<P><STRONG><a name="[9a]"></a>nm_spi_init</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, nmspi.o(i.nm_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nm_spi_init &rArr; nm_spi_read_reg &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_write_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_read_reg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_init
</UL>

<P><STRONG><a name="[a9]"></a>nm_spi_read_block</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nmspi.o(i.nm_spi_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nm_spi_read_block &rArr; nm_spi_read &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_nm_read_block
</UL>

<P><STRONG><a name="[a0]"></a>nm_spi_read_reg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nmspi.o(i.nm_spi_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nm_spi_read_reg &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg
</UL>

<P><STRONG><a name="[a1]"></a>nm_spi_read_reg_with_ret</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nmspi.o(i.nm_spi_read_reg_with_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg_with_ret
</UL>

<P><STRONG><a name="[ac]"></a>nm_spi_write_block</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nmspi.o(i.nm_spi_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nm_spi_write_block &rArr; nm_spi_write &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_nm_write_block
</UL>

<P><STRONG><a name="[a4]"></a>nm_spi_write_reg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nmspi.o(i.nm_spi_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nm_spi_write_reg &rArr; spi_write_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_reg
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_init
</UL>

<P><STRONG><a name="[83]"></a>nm_write_block</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, nmbus.o(i.nm_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nm_write_block &rArr; p_nm_write_block &rArr; nm_spi_write_block &rArr; nm_spi_write &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_nm_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_send
</UL>

<P><STRONG><a name="[71]"></a>nm_write_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nmbus.o(i.nm_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nm_write_reg &rArr; nm_spi_write_reg &rArr; spi_write_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_clkless_wake
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_send
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_chip_wake
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_chip_sleep
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_set_rx_done
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_isr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_firmware_start
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_bootrom
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_deinit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_apply_conf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupts
</UL>

<P><STRONG><a name="[99]"></a>nmi_get_chipid</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nmasic.o(i.nmi_get_chipid))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = nmi_get_chipid &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg_with_ret
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_get_firmware_info
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_bootrom
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_init
</UL>

<P><STRONG><a name="[9b]"></a>wait_for_bootrom</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, nmasic.o(i.wait_for_bootrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wait_for_bootrom &rArr; chip_apply_conf &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_reg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_sleep
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_get_chipid
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_apply_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_init
</UL>

<P><STRONG><a name="[9c]"></a>wait_for_firmware_start</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, nmasic.o(i.wait_for_firmware_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wait_for_firmware_start &rArr; nm_read_reg &rArr; nm_spi_read_reg &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_reg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_sleep
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_drv_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[96]"></a>spi_rw</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, nm_bus_wrapper_samd21.o(i.spi_rw))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bus_ioctl
</UL>

<P><STRONG><a name="[7a]"></a>hif_isr</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, m2m_hif.o(i.hif_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = hif_isr &rArr; hif_chip_wake &rArr; nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_reg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg_with_ret
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_block
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_chip_wake
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_chip_sleep
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_set_rx_done
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_interrupt_ctrl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_handle_isr
</UL>

<P><STRONG><a name="[80]"></a>hif_set_rx_done</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m2m_hif.o(i.hif_set_rx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = hif_set_rx_done &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_reg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_reg_with_ret
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bsp_interrupt_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_receive
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_isr
</UL>

<P><STRONG><a name="[43]"></a>m2m_hif_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m2m_hif.o(i.m2m_hif_cb))
<BR>[Address Reference Count : 1]<UL><LI> m2m_hif.o(i.hif_init)
</UL>
<P><STRONG><a name="[44]"></a>m2m_wifi_cb</STRONG> (Thumb, 498 bytes, Stack size 128 bytes, m2m_wifi.o(i.m2m_wifi_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = m2m_wifi_cb &rArr; hif_receive &rArr; nm_read_block &rArr; p_nm_read_block &rArr; nm_spi_read_block &rArr; nm_spi_read &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hif_receive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_memset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2m_wifi.o(i.m2m_wifi_init)
</UL>
<P><STRONG><a name="[9e]"></a>p_nm_read_block</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nmbus.o(i.p_nm_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = p_nm_read_block &rArr; nm_spi_read_block &rArr; nm_spi_read &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_read_block
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_read_block
</UL>

<P><STRONG><a name="[ad]"></a>p_nm_write_block</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nmbus.o(i.p_nm_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = p_nm_write_block &rArr; nm_spi_write_block &rArr; nm_spi_write &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_write_block
</UL>

<P><STRONG><a name="[a5]"></a>nm_spi_read</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nmspi.o(i.nm_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nm_spi_read &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_data_read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cmd_rsp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_read_block
</UL>

<P><STRONG><a name="[aa]"></a>nm_spi_write</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, nmspi.o(i.nm_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nm_spi_write &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_data_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cmd_rsp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_write_block
</UL>

<P><STRONG><a name="[ae]"></a>nmi_spi_read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nmspi.o(i.nmi_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nmi_spi_read &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bus_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_data_read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cmd_rsp
</UL>

<P><STRONG><a name="[af]"></a>nmi_spi_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nmspi.o(i.nmi_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_bus_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_data_write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cmd
</UL>

<P><STRONG><a name="[a6]"></a>spi_cmd</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, nmspi.o(i.spi_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_spi_write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_read
</UL>

<P><STRONG><a name="[a7]"></a>spi_cmd_rsp</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, nmspi.o(i.spi_cmd_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = spi_cmd_rsp &rArr; nmi_spi_read &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_spi_read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_read
</UL>

<P><STRONG><a name="[a8]"></a>spi_data_read</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, nmspi.o(i.spi_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = spi_data_read &rArr; nmi_spi_read &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_spi_read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_reg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_read
</UL>

<P><STRONG><a name="[ab]"></a>spi_data_write</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, nmspi.o(i.spi_data_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = spi_data_write &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_spi_write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_write
</UL>

<P><STRONG><a name="[a2]"></a>spi_read_reg</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, nmspi.o(i.spi_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_data_read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cmd_rsp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_read_reg_with_ret
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_read_reg
</UL>

<P><STRONG><a name="[a3]"></a>spi_write_reg</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nmspi.o(i.spi_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = spi_write_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cmd_rsp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nm_spi_write_reg
</UL>

<P><STRONG><a name="[64]"></a>MX_GPIO_Init</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>MX_SPI2_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>wifi_cb</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, main.o(i.wifi_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wifi_cb &rArr; m2m_wifi_connect &rArr; m2m_wifi_connect_sc &rArr; hif_send &rArr; hif_chip_wake &rArr; nm_clkless_wake &rArr; nm_read_reg_with_ret &rArr; nm_spi_read_reg_with_ret &rArr; spi_read_reg &rArr; spi_cmd &rArr; nmi_spi_write &rArr; nm_bus_ioctl &rArr; spi_rw &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_request_scan
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_request_dhcp_client
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_req_scan_result
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_get_num_ap_found
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m2m_wifi_connect
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[60]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[67]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[57]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[63]"></a>UART_SetConfig</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[6d]"></a>_printf_core</STRONG> (Thumb, 984 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[6f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
